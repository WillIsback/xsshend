use anyhow::Result;
use dialoguer::{theme::ColorfulTheme, MultiSelect, Select, Input, Confirm};
use std::path::Path;
use crate::config::{HostsConfig, HostEntry};

/// Demande √† l'utilisateur de s√©lectionner des serveurs de mani√®re interactive
pub fn select_hosts(config: &HostsConfig) -> Result<Vec<(String, &HostEntry)>> {
    println!("üéØ S√©lection interactive des serveurs\n");

    // Obtenir tous les h√¥tes disponibles
    let all_hosts = config.get_all_hosts();
    
    if all_hosts.is_empty() {
        println!("‚ùå Aucun serveur trouv√© dans la configuration");
        return Ok(vec![]);
    }

    // Cr√©er les options pour le s√©lecteur
    let host_options: Vec<String> = all_hosts
        .iter()
        .map(|(name, entry)| format!("{} ‚Üí {}", name, entry.alias))
        .collect();

    // Interface de s√©lection multiple
    let selections = MultiSelect::with_theme(&ColorfulTheme::default())
        .with_prompt("S√©lectionnez les serveurs cibles")
        .items(&host_options)
        .interact()?;

    // Retourner les h√¥tes s√©lectionn√©s
    let selected_hosts: Vec<(String, &HostEntry)> = selections
        .into_iter()
        .map(|i| all_hosts[i].clone())
        .collect();

    if selected_hosts.is_empty() {
        println!("‚ö†Ô∏è  Aucun serveur s√©lectionn√©");
    } else {
        println!("‚úÖ {} serveur(s) s√©lectionn√©(s)", selected_hosts.len());
    }

    Ok(selected_hosts)
}

/// Demande la passphrase SSH de mani√®re s√©curis√©e
pub fn prompt_passphrase() -> Result<Option<String>> {
    let needs_passphrase = Confirm::with_theme(&ColorfulTheme::default())
        .with_prompt("Votre cl√© SSH n√©cessite-t-elle une passphrase ?")
        .default(false)
        .interact()?;

    if needs_passphrase {
        let passphrase = rpassword::prompt_password("üîë Passphrase SSH: ")?;
        Ok(Some(passphrase))
    } else {
        Ok(None)
    }
}

/// Demande de confirmation avant le t√©l√©versement
pub fn confirm_upload(
    files: &[&Path], 
    hosts: &[(String, &HostEntry)],
    destination: &str
) -> Result<bool> {
    println!("\nüìã R√©capitulatif du t√©l√©versement:");
    println!("   Fichiers: {:?}", files);
    println!("   Destination: {}", destination);
    println!("   Serveurs: {} cibles", hosts.len());
    
    for (name, entry) in hosts {
        println!("     ‚Ä¢ {} ‚Üí {}", name, entry.alias);
    }

    let confirmed = Confirm::with_theme(&ColorfulTheme::default())
        .with_prompt("\nüöÄ Confirmer le t√©l√©versement ?")
        .default(true)
        .interact()?;

    Ok(confirmed)
}

/// S√©lecteur d'environnement interactif
pub fn select_environment(config: &HostsConfig) -> Result<Option<String>> {
    let environments: Vec<String> = config.environments.keys().cloned().collect();
    
    if environments.is_empty() {
        return Ok(None);
    }

    let selection = Select::with_theme(&ColorfulTheme::default())
        .with_prompt("S√©lectionnez un environnement")
        .items(&environments)
        .default(0)
        .interact()?;

    Ok(Some(environments[selection].clone()))
}

/// Demande le r√©pertoire de destination
pub fn prompt_destination() -> Result<String> {
    let destination = Input::with_theme(&ColorfulTheme::default())
        .with_prompt("R√©pertoire de destination")
        .default("/tmp/".to_string())
        .interact_text()?;

    Ok(destination)
}
