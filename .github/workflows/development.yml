name: Development

on:
  push:
    branches: [ develop, feature/** ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always

jobs:
  quick-check:
    name: Quick checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    - name: Cache cargo
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-dev-${{ hashFiles('**/Cargo.lock') }}

    - name: Check formatting
      run: cargo fmt --all -- --check

    - name: Run Clippy
      run: cargo clippy --all-targets --all-features -- -D warnings

    - name: Check compilation
      run: cargo check --verbose

  test:
    name: Run tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Cache cargo
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-test-${{ hashFiles('**/Cargo.lock') }}

    - name: Run tests
      run: cargo test --verbose

    - name: Test build
      run: cargo build --verbose

  version-check:
    name: Check version consistency
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && contains(github.head_ref, 'release/')
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Check version consistency
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          // Lire la version dans Cargo.toml
          const cargoTomlPath = path.join(process.env.GITHUB_WORKSPACE, 'Cargo.toml');
          const cargoToml = fs.readFileSync(cargoTomlPath, 'utf8');
          const cargoVersionMatch = cargoToml.match(/^version\s*=\s*"([^"]+)"/m);
          const cargoVersion = cargoVersionMatch ? cargoVersionMatch[1] : null;
          
          // Lire la version dans main.rs
          const mainRsPath = path.join(process.env.GITHUB_WORKSPACE, 'src', 'main.rs');
          const mainRs = fs.readFileSync(mainRsPath, 'utf8');
          const mainVersionMatch = mainRs.match(/version\s*=\s*"([^"]+)"/);
          const mainVersion = mainVersionMatch ? mainVersionMatch[1] : null;
          
          console.log(`Cargo.toml version: ${cargoVersion}`);
          console.log(`main.rs version: ${mainVersion}`);
          
          let warnings = [];
          let errors = [];
          
          if (!cargoVersion) {
            errors.push('‚ùå Impossible de lire la version dans Cargo.toml');
          }
          
          if (!mainVersion) {
            errors.push('‚ùå Impossible de lire la version dans src/main.rs');
          }
          
          if (cargoVersion && mainVersion && cargoVersion !== mainVersion) {
            errors.push(`‚ùå Versions incoh√©rentes: Cargo.toml (${cargoVersion}) != main.rs (${mainVersion})`);
          }
          
          // V√©rifier si la version existe d√©j√† sur crates.io
          if (cargoVersion) {
            try {
              const response = await fetch(`https://crates.io/api/v1/crates/xsshend/${cargoVersion}`);
              if (response.ok) {
                warnings.push(`‚ö†Ô∏è  Version ${cargoVersion} existe d√©j√† sur crates.io`);
              } else {
                console.log(`‚úÖ Version ${cargoVersion} n'existe pas encore sur crates.io`);
              }
            } catch (error) {
              warnings.push(`‚ö†Ô∏è  Impossible de v√©rifier crates.io: ${error.message}`);
            }
          }
          
          // Cr√©er un r√©sum√©
          core.summary.addHeading('üîç V√©rification des versions');
          
          if (errors.length > 0) {
            core.summary.addHeading('‚ùå Erreurs d√©tect√©es', 3);
            core.summary.addList(errors);
            core.setFailed('Incoh√©rences de version d√©tect√©es');
          }
          
          if (warnings.length > 0) {
            core.summary.addHeading('‚ö†Ô∏è  Avertissements', 3);
            core.summary.addList(warnings);
          }
          
          if (errors.length === 0) {
            core.summary.addHeading('‚úÖ Coh√©rence des versions', 3);
            core.summary.addTable([
              ['Fichier', 'Version'],
              ['Cargo.toml', cargoVersion || 'N/A'],
              ['main.rs', mainVersion || 'N/A']
            ]);
          }
          
          await core.summary.write();
